package grupoD.associapp.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import grupoD.associapp.enums.Cargo;
import grupoD.associapp.enums.Zona;
import grupoD.associapp.interfaces.MembroDAO;
import grupoD.associapp.modelo.Comunidade;
import grupoD.associapp.modelo.Membro;
import grupoD.associapp.modelo.Recurso;

public class MembroJDBC_DAO implements MembroDAO{
	
	private Connection conn;
	
	public Membro inserir(Membro m) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "INSERT INTO membros(id_pessoa, cargo) VALUES('"
		+ m.getPessoa().getId() + "','"
		+ m.getCargo() + ");";
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			sql = "SELECT id FROM membros ORDER BY id DESC limit 1";
			ResultSet rs = stmt.executeQuery(sql);
			int id = rs.getInt("id");
			m.setId(id);
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao inserir membro");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
		
		return m;
	}
	@Override
	public void createTable() {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "CREATE TABLE membros(id INTEGER PRIMARY KEY AUTOINCREMENT, id_pessoa INT, cargo TEXT);";
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			conn.close();
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao criar tabela");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}
	@Override
	public List<Membro> lista() {
		// TODO Auto-generated method stub
		return null;
		}
	@Override
	public void remover(Membro m) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "DELETE FROM membros where membros.id_pessoa = " + m.getPessoa().getId();
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		}catch (Exception e){
			e.printStackTrace();
			System.out.println("Erro ao excluir membro");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}
	@Override
	public Membro obter(int id) {
		conn = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM membros WHERE id = " + id;
		Membro m = null;
		try {
			Statement stmt = conn.createStatement();
			ResultSet resultado = stmt.executeQuery(sql);
			while (resultado.next()) {
				m = new Membro();
				m.setId(resultado.getInt("id"));
				m.setCargo(Cargo.fromString(resultado.getString("cargo")));
			}
			System.out.println("rodou?");
			return m;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
}
