package grupoD.associapp.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import grupoD.associapp.interfaces.ParentescoDAO;
import grupoD.associapp.modelo.Contato;
import grupoD.associapp.modelo.Membro;
import grupoD.associapp.modelo.Parentesco;
import grupoD.associapp.modelo.Recurso;

public class ParentescoJDBC_DAO implements ParentescoDAO{
	
	private Connection conn;
	
	public Parentesco inserir(Parentesco p) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "INSERT INTO parentescos(parente, tipo) VALUES('" + p.getParente() + "'," + p.getTipo().getNome() + ");";
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			sql = "SELECT id FROM parentescos ORDER BY id DESC limit 1";
			ResultSet rs = stmt.executeQuery(sql);
			int id = rs.getInt("id");
			p.setId(id);
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao inserir Parentesco");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
		
		return p;
	}
	@Override
	public void createTable() {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "CREATE TABLE parentescos(id INTEGER PRIMARY KEY AUTOINCREMENT, parente TEXT, tipo TEXT, id_pessoa INT);";
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
			conn.close();
		}catch (SQLException e){
			e.printStackTrace();
			System.out.println("Erro ao criar tabela");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}
	@Override
	public List<Parentesco> obterParentescos(int id_pessoa) {
		conn = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM parentescos WHERE id_pessoa = " + id_pessoa;
		List<Parentesco> parentescos = new ArrayList<>();
		try {
			Statement stmt = conn.createStatement();
			ResultSet resultado = stmt.executeQuery(sql);
			PessoaJDBC_DAO daoP = new PessoaJDBC_DAO();
			while (resultado.next()) {
				Parentesco p = new Parentesco();
				p.setId(resultado.getInt("id"));
				p.setParente(daoP.obter(id_pessoa));
				//p.setTipo(resultado.getString("tipo")); ??????
				parentescos.add(p);
			}
			
			return parentescos;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}
	
	@Override
	public void remover(Parentesco p) {
		Connection conn = ConnectionFactory.getConnection();
		String sql = "DELETE FROM parentescos where parentescos.tipo = " + p.getTipo().getNome();
		try{
			System.out.println(sql);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		}catch (Exception e){
			e.printStackTrace();
			System.out.println("Erro ao excluir parentesco");
		}finally{
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println("Erro ao fechar conexão");
				e.printStackTrace();
			}
		}
	}
	@Override
	public Parentesco obter(String tipo) {
		// TODO Auto-generated method stub
		return null;
	}

}
